package com.ejemplor.relaciones.controller;

import java.util.ArrayList;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.ejemplor.relaciones.dto.TipoDocumentoDto;
import com.ejemplor.relaciones.models.TipoDocumento;
import com.ejemplor.relaciones.repository.TipoDocumentoRepository;

@RestController
@RequestMapping("documento")
public class TipoDocumentoController {

	@Autowired
	private TipoDocumentoRepository documentoRepository;
	
	@GetMapping("/")
	public ResponseEntity listarTodos(){
		try{
			Iterable<TipoDocumento> lista;
			ArrayList<TipoDocumentoDto> listaSalida = new ArrayList<TipoDocumentoDto>();
			
			lista = documentoRepository.findAll();
			
			lista.forEach(registro ->{
				TipoDocumentoDto unDocumento = new TipoDocumentoDto();
				unDocumento.setId(registro.getId());
				unDocumento.setNombre(registro.getNombre());
				unDocumento.setDescripcion(registro.getDescripcion());
				
				listaSalida.add(unDocumento);
			});
			
			return ResponseEntity.ok(listaSalida);
		}
		catch(Exception e){
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e);
		}
	}
	
	@PostMapping("/")
	public ResponseEntity guardar(@RequestBody TipoDocumentoDto documento){
		try{
			TipoDocumento unDocumento;
			
			if(documento.getNombre().isEmpty()){
				throw new Exception("El campo del nombre se encuentra vacio.");
			}
			if(documento.getNombre().length()>20||documento.getNombre().length()<3){
				throw new Exception("Longitud del nombre incorrecta.");
			}
			if(documento.getDescripcion().length()>150){
				throw new Exception("Longitud incorrecta de la descripcion.");
			}
			
			//registro duplicado
			if(documentoRepository.findByNombre(documento.getNombre()).isPresent()){
				throw new Exception("Ya existe un documento con ese nombre.");
			}
			
			unDocumento = new TipoDocumento(documento.getNombre(), documento.getDescripcion());
			
			documentoRepository.save(unDocumento);
			documento.setId(unDocumento.getId());
			return ResponseEntity.ok(documento);
		}
		catch(Exception e){
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Problema: "+e);
		}
	}
	
	@PutMapping("/{id}")
	public ResponseEntity actualizar(@RequestBody TipoDocumentoDto documento, @PathVariable int id){
		try{
			TipoDocumento unDocumento;
			Optional<TipoDocumento> x = documentoRepository.findByNombre(documento.getNombre());
			
			
			if(documento.getNombre().isEmpty()){
				throw new Exception("El campo del nombre se encuentra vacio.");
			}
			if(documento.getNombre().length()>20||documento.getNombre().length()<3){
				throw new Exception("Longitud del nombre incorrecta.");
			}
			if(documento.getDescripcion().length()>150){
				throw new Exception("Longitud incorrecta de la descripcion.");
			}
			if(!documentoRepository.findById(id).isPresent()){
				throw new Exception("No existe registro con ese Id.");
			}
			if(documentoRepository.findByNombre(documento.getNombre()).isPresent() && documentoRepository.findByNombre(documento.getNombre()).get().getId()!=id){
				throw new Exception("Ya existe un documento con ese nombre.");
			}			
			
			
			unDocumento = new TipoDocumento(documento.getNombre(), documento.getDescripcion());
			unDocumento.setId(id);
			
			documentoRepository.save(unDocumento);
			
			documento.setId(id);
			return ResponseEntity.ok(documento);
		}
		catch(Exception e){
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Problema: "+e);
		}
	}
	
	
}
